type Challenge {
  id: ChallengeId!
  name: String!
  createdOn: OffsetDateTime!
  finishesOn: OffsetDateTime!
  createdBy: User!
  summaries(size: Int, offset: Int): [UserChallengeSummary!]!
  leader: User
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar ChallengeId

input ChallengesFilter {
  id: ChallengeId
  name: String
  createdBy: UserId
  createdOn: OffsetDateTime
  finishesOn: OffsetDateTime
}

input CreateChallenge {
  id: ChallengeId
  name: String!
  createdBy: UserId!
  createdOn: OffsetDateTime = false
  finishesOn: OffsetDateTime!
}

input CreateUser {
  id: UserId
  name: String!
  email: Email!
  gender: Gender!
  createdAt: OffsetDateTime = false
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar Email

enum Gender {
  Male
  Female
}

input JoinChallenge {
  userId: UserId!
  challengeId: ChallengeId!
}

input LogActivity {
  userId: UserId!
  challengeId: ChallengeId!
  value: Float!
  date: OffsetDateTime
}

type Mutation {
  createUser(input: CreateUser!): User!
  createChallenge(input: CreateChallenge!): Challenge!
  joinChallenge(input: JoinChallenge!): UserChallengeSummary!
  logActivity(input: LogActivity!): UserChallengeActivity!
}

scalar OffsetDateTime

type Query {
  allUsers(size: Int, offset: Int, filter: UsersFilter): [User!]!
  user(id: UserId!): User
  getUserByEmail(email: Email!): User
  allChallenges(size: Int, offset: Int, filter: ChallengesFilter): [Challenge!]!
  challenge(id: ChallengeId!): Challenge
  allUserChallengeSummaries(size: Int, offset: Int, filter: UserChallengeSummariesFilter): [UserChallengeSummary!]!
  userchallengesummary(id: UserChallengeSummaryId!): UserChallengeSummary
  allUserChallengeActivities(size: Int, offset: Int, filter: UserChallengeActivitiesFilter): [UserChallengeActivity!]!
  userchallengeactivity(id: UserChallengeActivityId!): UserChallengeActivity
}

type User {
  id: UserId!
  name: String!
  email: Email!
  gender: Gender!
  createdAt: OffsetDateTime!
  activities(size: Int, offset: Int): [UserChallengeActivity!]!
  challenges(size: Int, offset: Int): [UserChallengeSummary!]!
  participatesInChallenge(challengeId: String!): Boolean!
}

input UserChallengeActivitiesFilter {
  id: UserChallengeActivityId
  userId: UserId
  challengeId: ChallengeId
  value: Float
  date: OffsetDateTime
}

type UserChallengeActivity {
  id: UserChallengeActivityId!
  value: Float!
  date: OffsetDateTime!
  user: User!
  challenge: Challenge!
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar UserChallengeActivityId

input UserChallengeSummariesFilter {
  id: UserChallengeSummaryId
  userId: UserId
  challengeId: ChallengeId
  summaryValue: Float
  lastActive: OffsetDateTime
}

type UserChallengeSummary {
  id: UserChallengeSummaryId!
  summaryValue: Float!
  position: Int
  lastActive: OffsetDateTime
  user: User!
  challenge: Challenge!
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar UserChallengeSummaryId

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar UserId

input UsersFilter {
  id: UserId
  name: String
  email: String
  gender: Gender
}

