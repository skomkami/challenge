type Challenge {
  id: ChallengeId!
  name: String!
  description: String!
  createdOn: OffsetDateTime!
  finishesOn: OffsetDateTime!
  measure: Measure!
  createdBy: User!
  summaries(size: Int, offset: Int, orderBy: UserChallengeSummarySort): UserChallengeSummarysResponse!
  leader: User
}

input ChallengeFilter {
  name: String
  description: String
  createdBy: UserId
  createdOn: OffsetDateTime
  finishesOn: OffsetDateTime
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar ChallengeId

input ChallengeSort {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  createdOn: SortOrder
  finishesOn: SortOrder
}

type ChallengesResponse {
  total: Long!
  hasNextPage: Boolean!
  results: [Challenge!]!
}

input CreateChallenge {
  id: ChallengeId
  name: String!
  description: String!
  createdBy: UserId!
  createdOn: OffsetDateTime = false
  finishesOn: OffsetDateTime!
  measure: MeasureInput!
}

input CreateUser {
  id: UserId
  name: String!
  email: Email!
  gender: Gender!
  createdAt: OffsetDateTime = false
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar Email

enum Gender {
  Male
  Female
}

type Invitation {
  id: InvitationId!
  read: Boolean!
  sendTime: OffsetDateTime!
  forUser: User!
  fromUser: User!
  toChallenge: Challenge!
}

input InvitationFilter {
  forUser: UserId
  fromUser: UserId
  toChallenge: ChallengeId
  read: Boolean
  sendTime: OffsetDateTime
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar InvitationId

input InvitationSort {
  id: SortOrder
  read: SortOrder
  sendTime: SortOrder
}

type InvitationsResponse {
  total: Long!
  hasNextPage: Boolean!
  results: [Invitation!]!
}

input JoinChallenge {
  userId: UserId!
  challengeId: ChallengeId!
}

input LogActivity {
  userId: UserId!
  challengeId: ChallengeId!
  value: MeasureValueInput!
  date: OffsetDateTime
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

input MarkInvitationAsRead {
  id: InvitationId!
}

type Measure {
  unitName: String!
  allowDecimal: Boolean!
  valueSummarization: ValueSummarization!
  valueOrder: ValueOrder!
}

input MeasureInput {
  unitName: String!
  allowDecimal: Boolean!
  valueSummarization: ValueSummarization!
  valueOrder: ValueOrder!
}

type MeasureValue {
  integerValue: Int
  decimalValue: Float
}

input MeasureValueInput {
  integerValue: Int
  decimalValue: Float
}

type Mutation {
  createUser(input: CreateUser!): User!
  createChallenge(input: CreateChallenge!): Challenge!
  joinChallenge(input: JoinChallenge!): UserChallengeSummary!
  logActivity(input: LogActivity!): UserChallengeActivity!
  sendInvitation(input: SendInvitation!): Invitation!
  markInvitationAsRead(input: MarkInvitationAsRead!): Invitation!
}

scalar OffsetDateTime

type Query {
  allUsers(size: Int, offset: Int, filter: UserFilter, orderBy: UserSort): UsersResponse!
  user(id: UserId!): User
  getUserByEmail(email: Email!): User
  allChallenges(size: Int, offset: Int, filter: ChallengeFilter, orderBy: ChallengeSort): ChallengesResponse!
  challenge(id: ChallengeId!): Challenge
  allUserChallengeSummaries(size: Int, offset: Int, filter: UserChallengeSummaryFilter, orderBy: UserChallengeSummarySort): UserChallengeSummarysResponse!
  userchallengesummary(id: UserChallengeSummaryId!): UserChallengeSummary
  allUserChallengeActivities(size: Int, offset: Int, filter: UserChallengeActivityFilter, orderBy: UserChallengeActivitySort): UserChallengeActivitysResponse!
  userchallengeactivity(id: UserChallengeActivityId!): UserChallengeActivity
  allInvitations(size: Int, offset: Int, filter: InvitationFilter, orderBy: InvitationSort): InvitationsResponse!
  invitation(id: InvitationId!): Invitation
}

input SendInvitation {
  forUser: UserId!
  fromUser: UserId!
  toChallenge: ChallengeId!
}

enum SortOrder {
  Desc
  Asc
}

type User {
  id: UserId!
  name: String!
  email: Email!
  gender: Gender!
  createdAt: OffsetDateTime!
  activities(size: Int, offset: Int, orderBy: UserChallengeActivitySort): UserChallengeActivitysResponse!
  challenges(size: Int, offset: Int): UserChallengeSummarysResponse!
  invitations(size: Int, offset: Int, filter: InvitationFilter): InvitationsResponse!
  participatesInChallenge(challengeId: ChallengeId!): Boolean!
}

type UserChallengeActivity {
  id: UserChallengeActivityId!
  value: MeasureValue!
  date: OffsetDateTime!
  user: User!
  challenge: Challenge!
}

input UserChallengeActivityFilter {
  userId: UserId
  challengeId: ChallengeId
  date: OffsetDateTime
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar UserChallengeActivityId

input UserChallengeActivitySort {
  id: SortOrder
  date: SortOrder
}

type UserChallengeActivitysResponse {
  total: Long!
  hasNextPage: Boolean!
  results: [UserChallengeActivity!]!
}

type UserChallengeSummary {
  id: UserChallengeSummaryId!
  summaryValue: MeasureValue!
  position: Int
  lastActive: OffsetDateTime
  user: User!
  challenge: Challenge!
}

input UserChallengeSummaryFilter {
  userId: UserId
  challengeId: ChallengeId
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar UserChallengeSummaryId

input UserChallengeSummarySort {
  id: SortOrder
  position: SortOrder
  lastActive: SortOrder
}

type UserChallengeSummarysResponse {
  total: Long!
  hasNextPage: Boolean!
  results: [UserChallengeSummary!]!
}

input UserFilter {
  name: String
  email: Email
  gender: Gender
  createdAt: OffsetDateTime
}

# The `String` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar UserId

input UserSort {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  createdAt: SortOrder
  participatesInChallenge: SortOrder
}

type UsersResponse {
  total: Long!
  hasNextPage: Boolean!
  results: [User!]!
}

enum ValueOrder {
  BiggerWins
  SmallerWins
}

enum ValueSummarization {
  Summarize
  Best
}

